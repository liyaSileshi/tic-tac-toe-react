{"version":3,"sources":["components/Square.jsx","components/Board.jsx","components/Game.jsx","App.jsx","serviceWorker.js","index.js"],"names":["Square","props","onClick","value","type","className","calculateWinner","squares","lines","i","length","a","b","c","defaultProps","Board","this","renderSquare","React","Component","Game","state","history","Array","fill","stepNumber","xIsNext","newHistory","slice","setState","concat","step","status","current","winner","moves","map","move","desc","key","jumpTo","handleClick","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.782c4dbd.chunk.js","sourcesContent":["import React from 'react';\nimport './Square.css';\nimport PropTypes from 'prop-types';\n\nfunction Square(props) {\n  const { onClick, value } = props;\n  return (\n    <button\n      type=\"button\"\n      className=\"square\"\n      onClick={onClick}\n    >\n      {value}\n    </button>\n  );\n}\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i += 1) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n\nexport { Square, calculateWinner };\n\n// Define your prop types here:\nSquare.propTypes = {\n  value: PropTypes.number, // An int\n  onClick: PropTypes.func.isRequired, // a required function\n};\n\n// Set a default values for props\nSquare.defaultProps = {\n  value: null, // the default for name\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Square } from './Square';\nimport './Board.css';\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    const { squares, onClick } = this.props;\n    return (\n      <Square\n        value={squares[i]}\n        onClick={() => onClick(i)}\n        // onClick={this.props.onClick(i)}\n      />\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Board;\n\n// Define your prop types here:\nBoard.propTypes = {\n  // squares : PropTypes.array,\n  squares: PropTypes.arrayOf(PropTypes.string), // An int\n  onClick: PropTypes.func.isRequired, // a required function\n};\n\n// Set a default values for props\nBoard.defaultProps = {\n  squares: null, // the default for name\n};\n","import React from 'react';\n// eslint-disable-next-line import/extensions\nimport Board from './Board.jsx';\nimport './Game.css';\nimport { calculateWinner } from './Square';\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null),\n      }],\n      stepNumber: 0,\n      xIsNext: true,\n    };\n  }\n\n  handleClick(i) {\n    const { history, stepNumber, xIsNext } = this.state;\n\n    const newHistory = history.slice(0,\n      // eslint-disable-next-line max-len\n      stepNumber + 1); // to make sure if we go back and make change, we throw away all the past 'futures'\n    const current = newHistory[newHistory.length - 1];\n    const squares = current.squares.slice();\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    squares[i] = xIsNext ? 'X' : 'O';\n    this.setState({\n      history: newHistory.concat([{\n        squares,\n      }]),\n      stepNumber: newHistory.length,\n      xIsNext: !xIsNext,\n    });\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: (step % 2) === 0, // returns T/F\n    });\n  }\n\n  render() {\n    const { history, stepNumber, xIsNext } = this.state;\n    // eslint-disable-next-line max-len\n    const current = history[stepNumber]; // the last element in the array(the recent state of the game)\n    const winner = calculateWinner(current.squares);\n    const moves = history.map((step, move) => {\n      const desc = move\n        ? `Go to move #${move}`\n        : 'Go to game start';\n      return (\n        <li key={move}>\n          <button className=\"history-button\" type=\"button\" onClick={() => this.jumpTo(move)}>\n            {desc}\n          </button>\n        </li>\n      );\n    });\n\n    let status;\n    if (winner) {\n      status = `winner: ${winner}`;\n    } else {\n      status = `Next player: ${xIsNext\n        ? 'X' : 'O'}`;\n    }\n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            squares={current.squares}\n            onClick={(i) => this.handleClick(i)}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <ol>{moves}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\n\nexport default Game;\n","import React from 'react';\nimport './App.css';\n// eslint-disable-next-line import/extensions\nimport Game from './components/Game.jsx';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// eslint-disable-next-line import/extensions\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}